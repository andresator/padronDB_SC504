----------Definicion Tabla Personas-------------------

  CREATE TABLE "PADRONAPP"."PERSONAS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CEDULA" VARCHAR2(191 BYTE) NOT NULL ENABLE, 
	"CODELEC" NUMBER(19,0) NOT NULL ENABLE, 
	"VENCCEDULA" VARCHAR2(8 BYTE) NOT NULL ENABLE, 
	"JUNTARECEPTORA" VARCHAR2(5 BYTE) DEFAULT '00000' NOT NULL ENABLE, 
	"NOMBRE" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	"PRIMERAPELLIDO" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	"SEGUNDOAPELLIDO" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	 CONSTRAINT "PERSONAS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE, 
	 CONSTRAINT "PERSONAS_CODELEC_FK" FOREIGN KEY ("CODELEC")
	  REFERENCES "PADRONAPP"."DISTELEC" ("CODELEC") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE UNIQUE INDEX "PADRONAPP"."PERSONAS_CEDULA_UK" ON "PADRONAPP"."PERSONAS" (LOWER("CEDULA")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PADRONAPP"."PERSONAS_ID_TRG" 
            before insert on PERSONAS
            for each row
                begin
            if :new.ID is null then
                select personas_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "PADRONAPP"."PERSONAS_ID_TRG" ENABLE;


----------Definicion Tabla Bitacora-----------

create table bitacora
(usuario varchar2(40),
fecha timestamp,
sentencia varchar2(4000))

----------Definicion Tabla Distelec--------------------

CREATE TABLE "PADRONAPP"."DISTELEC" 
   (	"CODELEC" NUMBER(19,0) NOT NULL ENABLE, 
	"PROVINCIA" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"CANTON" VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	"DISTRITO" VARCHAR2(80 BYTE) NOT NULL ENABLE, 
	 CONSTRAINT "DISTELEC_CODELEC_PK" PRIMARY KEY ("CODELEC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE UNIQUE INDEX "PADRONAPP"."DISTELEC_CODELEC_UK" ON "PADRONAPP"."DISTELEC" (LOWER(TO_CHAR("CODELEC"))) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PADRONAPP"."DISTELEC_CODELEC_TRG" 
            before insert on DISTELEC
            for each row
                begin
            if :new.CODELEC is null then
                select distelec_Codelec_seq.nextval into :new.CODELEC from dual;
            end if;
            end;
/
ALTER TRIGGER "PADRONAPP"."DISTELEC_CODELEC_TRG" ENABLE;

---------Definicion Tabla Users-----------------------


  CREATE TABLE "PADRONAPP"."USERS" 
   (	"ID" NUMBER(19,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(191 BYTE) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(191 BYTE) NOT NULL ENABLE, 
	"EMAIL_VERIFIED_AT" TIMESTAMP (6), 
	"PASSWORD" VARCHAR2(191 BYTE) NOT NULL ENABLE, 
	"REMEMBER_TOKEN" VARCHAR2(100 BYTE), 
	"CURRENT_TEAM_ID" NUMBER(19,0), 
	"PROFILE_PHOTO_PATH" VARCHAR2(2048 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6), 
	"TWO_FACTOR_SECRET" CLOB, 
	"TWO_FACTOR_RECOVERY_CODES" CLOB, 
	"TWO_FACTOR_CONFIRMED_AT" TIMESTAMP (6), 
	 CONSTRAINT "USERS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TWO_FACTOR_SECRET") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("TWO_FACTOR_RECOVERY_CODES") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

  CREATE UNIQUE INDEX "PADRONAPP"."USERS_EMAIL_UK" ON "PADRONAPP"."USERS" (LOWER("EMAIL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PADRONAPP"."USERS_ID_TRG" 
            before insert on USERS
            for each row
                begin
            if :new.ID is null then
                select users_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "PADRONAPP"."USERS_ID_TRG" ENABLE;


----------Funcion Top 5 Nombres Menos Comunes----------

create or replace FUNCTION bottom5_names RETURN SYS_REFCURSOR AS
    rc SYS_REFCURSOR;
BEGIN
    OPEN rc FOR  
        SELECT *
        FROM (SELECT NOMBRE, COUNT( NOMBRE ) AS total
        FROM  PERSONAS
        GROUP BY NOMBRE
        ORDER BY total ASC )
        WHERE rownum <= 5;
    RETURN rc;
END;

----------Funcion Top 5 Nombres Mas Comunes----------

create or replace FUNCTION top5_names RETURN SYS_REFCURSOR AS
  rc SYS_REFCURSOR;
BEGIN
  OPEN rc FOR 
  SELECT *
        FROM (SELECT NOMBRE, COUNT( NOMBRE ) AS total
        FROM  PERSONAS
        GROUP BY NOMBRE
        ORDER BY total DESC)
        WHERE rownum <= 5;
  RETURN rc;
END;


----------Funcion Consulta Personas por Campos----------

create or replace FUNCTION CONSULTA_PERSONA(ced in varchar DEFAULT '', nom in varchar DEFAULT '',
ape1 in varchar DEFAULT '', ape2 in varchar DEFAULT '') RETURN SYS_REFCURSOR AS
    rc SYS_REFCURSOR;
BEGIN
    OPEN rc FOR
        SELECT * FROM personas
            WHERE cedula LIKE ced||'%'
            AND nombre LIKE nom||'%' 
            AND primerapellido LIKE  ape1||'%' 
            AND segundoapellido LIKE ape2||'%';
        RETURN rc;
    CLOSE rc;
END;

----------Funcion Reporte 5 Vocales----------

create or replace FUNCTION nombresVocales RETURN SYS_REFCURSOR AS
    rc SYS_REFCURSOR;
BEGIN
    OPEN rc FOR 
        SELECT * FROM (SELECT nombre, count(nombre) as TOTAL FROM personas
            WHERE nombre LIKE '%U%' 
            and nombre LIKE '%A%' 
            and nombre LIKE '%O%' 
            and nombre LIKE '%I%'
            and nombre LIKE '%E%'
            GROUP BY nombre)
            ORDER BY TOTAL DESC;
    RETURN rc;        
END;

----------Funcion Reporte Top Cantones----------

create or replace FUNCTION topCantones RETURN SYS_REFCURSOR AS
    rc SYS_REFCURSOR;
BEGIN
    OPEN rc FOR  
        SELECT * FROM ( SELECT distelec.canton, count(distelec.canton) as TOTAL from personas INNER JOIN distelec
            ON personas.CODELEC = distelec.codelec
            GROUP BY distelec.canton
            ORDER BY TOTAL DESC)
        WHERE ROWNUM <= 5;
    RETURN rc;
CLOSE rc;
END;


---------Auditoria de Tabla Personas-----------
create or replace
package AUDIT_HANDLER
is
PROCEDURE HANDLE_SELECT_PERSONAS
( object_schema VARCHAR2
, object_name VARCHAR2
, policy_name VARCHAR2
);
end;

create or replace
package body AUDIT_HANDLER
is
PROCEDURE HANDLE_SELECT_PERSONAS
( object_schema VARCHAR2
, object_name VARCHAR2
, policy_name VARCHAR2
) is
  PRAGMA AUTONOMOUS_TRANSACTION;
begin
  insert into bitacora
  ( usuario, fecha, sentencia)
  values
  ( user, systimestamp, sys_context('userenv','current_sql'))
  ;
  commit;
end HANDLE_SELECT_PERSONAS;
end;

create table bitacora
(usuario varchar2(40),
fecha timestamp,
sentencia varchar2(4000))

begin
  dbms_fga.add_policy
  ( object_schema=>'PADRONAPP',
  object_name=>'PERSONAS',
  policy_name=>'PERSONAS_ACCESO_HANDLED',
  audit_column => NULL,
  audit_condition => NULL,
  handler_schema => 'PADRONAPP',
  handler_module => 'AUDIT_HANDLER.HANDLE_SELECT_PERSONAS'
  );
end;
